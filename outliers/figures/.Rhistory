library(graphTweets) # for plot
library(igraph) # for plot
library(rtweet)
tweets <- search_tweets("#rstats", n = 200, include_rts = FALSE)
tweets
tweets %>%
gt_edges(text, screen_name, status_id) %>%
gt_graph() %>%
)
tweets
tweets$user_id
tweets$status_id
tweets$user_id
count(tweets$user_id)
plyr::count(tweets$user_id)
plyr::count(tweets$status_id)
plyr::count(tweets$screen_name)
gt_edges(text, screen_name)
tweets %>%  gt_edges(text, screen_name)
tweets %>%  gt_edges(text, screen_name, status_id)
tweets %>%
gt_edges(text, screen_name) %>%
gt_graph()
tweets %>%
gt_edges(text, screen_name, status_id) %>%
gt_graph()
tweets %>%
gt_edges(text, screen_name, status_id) %>%
gt_graph() -> g
g
dev.off()
plot(g)
wc <- walktrap.community(g)
V(g)$color <- membership(wc)
plot(g,
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g)*2,
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g),
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g)*2,
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g)*2,
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g),
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g),
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g),
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0.8),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
plot(g,
layout = igraph::layout.fruchterman.reingold(g),
vertex.color = V(g)$color,
vertex.label.family = "sans",
vertex.size = igraph::degree(g),
vertex.label.color = hsv(h = 1, s = .59, v = 0.9, alpha = 0),
edge.arrow.size = 0.3,
edge.arrow.width = 0.3, edge.width = 6,
vertex.frame.color="#fcfcfc")
wc
tweets
plyr::count(tweets$user_id)
plyr::count(tweets$user_id)[,2]
plyr::count(tweets$screen_name)
data = abs(round(rnorm(1000),1))
data2 = plyr::count(data)
wordcloud2(data2, size=0.7)
data = abs(round(rnorm(10000),2))
data2 = plyr::count(data)
wordcloud2(data2, size=1.6, figPath = resistance, color=rep_len( redPalette, nrow(data2) ) )
library(tidytext)
library(dplyr)
library(stringr)
library(wordcloud2)
data = abs(round(rnorm(1000),1))
data2 = plyr::count(data)
wordcloud2(data2, size=0.7)
data = abs(round(rnorm(10000),2))
data2 = plyr::count(data)
wordcloud2(data2, size=1.6, figPath = resistance, color=rep_len( redPalette, nrow(data2) ) )
wordcloud2(data2, size=1.6, color=rep_len( redPalette, nrow(data2) ) )
wordcloud2(data2, size=0.7)
getwd()
hist(data2)
data
data2
dev.off()
hist(data)
plot(density((data) )
)
hist(data)
hist(data, col=cols2)
hist(data, col=cols3)
tweets
tweets$text
unlist(tweets$text)
unlist(tweets$text)
unlist(tweets$text)
figPath = system.file("examples/t.png",package = "wordcloud2")
figPath
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(data2, size=0.7, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(data2,   figPath = figPath, size = 1.5,color = "skyblue")
letterCloud(demoFreq, word = "R", size = 2)
letterCloud(data2, word = "R", size = 2)
.
tweets$text
unlist(tweets$text)
strsplit( unlist(tweets$text), " " )
unlist(strsplit( unlist(tweets$text), " " ) )
tweet_freq = plyr::count(unlist(strsplit( unlist(tweets$text), " " ) ) )
tweet_freq
tweet_freq[1,]
tweet_freq
tweet_freq[,2]
dim(tweet_freq)
tweet_freq[,1]
unlist(strsplit( unlist(tweets$text), " " ) )
clean.text <- function(some_txt)
{
some_txt = gsub("(RT|via)((?:\b\W*@\w+)+)", "", some_txt)
some_txt = gsub("@\w+", "", some_txt)
some_txt = gsub("[[:punct:]]", "", some_txt)
some_txt = gsub("[[:digit:]]", "", some_txt)
some_txt = gsub("http\w+", "", some_txt)
some_txt = gsub("[ t]{2,}", "", some_txt)
some_txt = gsub("^\s+|\s+$", "", some_txt)
some_txt = gsub("amp", "", some_txt)
# define "tolower error handling" function
try.tolower = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
some_txt = sapply(some_txt, try.tolower)
some_txt = some_txt[some_txt != ""]
names(some_txt) = NULL
return(some_txt)
}
gsub("(RT|via)((?:\b\W*@\w+)+)", "", some_txt)
gsub("(RT|via)((?:\b\W*@\w+)+)", "", some_txt)
unlist(strsplit( unlist(tweets$text), " " ) )
tweet_words = unlist(strsplit( unlist(tweets$text), " " ) )
library(tm)
tm_map(tweet_words, toSpace, "/")
tm_map
tweet_texts = tweets$text
tm_map(tweet_texts, toSpace, "/")
?tmp_map
?tm_map
tm_map(tweet_texts[[1]], toSpace, "/")
tweet_words
gsub("[[:punct:]]", "", tweet_words)
gsub([[:digit:]], "", gsub("[[:punct:]]", "", tweet_words) )
gsub( "[[:digit:]]", "", gsub("[[:punct:]]", "", tweet_words) )
clean.text <- function(some_txt)
{
#some_txt = gsub("(RT|via)((?:\b\W*@\w+)+)", "", some_txt)
#some_txt = gsub("@\w+", "", some_txt)
some_txt = gsub("[[:punct:]]", "", some_txt)
some_txt = gsub("[[:digit:]]", "", some_txt)
some_txt = gsub("http\w+", "", some_txt)
some_txt = gsub("[ t]{2,}", "", some_txt)
some_txt = gsub("^\s+|\s+$", "", some_txt)
some_txt = gsub("amp", "", some_txt)
# define "tolower error handling" function
try.tolower = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
some_txt = sapply(some_txt, try.tolower)
some_txt = some_txt[some_txt != ""]
names(some_txt) = NULL
return(some_txt)
}
clean.text <- function(some_txt)
{
some_txt = gsub("(RT|via)((?:\b)+)", "", some_txt)
some_txt = gsub("@", "", some_txt)
some_txt = gsub("[[:punct:]]", "", some_txt)
some_txt = gsub("[[:digit:]]", "", some_txt)
some_txt = gsub("http\+", "", some_txt)
some_txt = gsub("[ t]{2,}", "", some_txt)
some_txt = gsub("^\s+|\s+$", "", some_txt)
some_txt = gsub("amp", "", some_txt)
# define "tolower error handling" function
try.tolower = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
some_txt = sapply(some_txt, try.tolower)
some_txt = some_txt[some_txt != ""]
names(some_txt) = NULL
return(some_txt)
}
clean.text <- function(some_txt)
{
#some_txt = gsub("(RT|via)((?:\b\W*@\w+)+)", "", some_txt)
#some_txt = gsub("@\w+", "", some_txt)
some_txt = gsub("[[:punct:]]", "", some_txt)
some_txt = gsub("[[:digit:]]", "", some_txt)
#some_txt = gsub("http\w+", "", some_txt)
some_txt = gsub("[ t]{2,}", "", some_txt)
some_txt = gsub("^\s+|\s+$", "", some_txt)
some_txt = gsub("amp", "", some_txt)
# define "tolower error handling" function
try.tolower = function(x)
{
y = NA
try_error = tryCatch(tolower(x), error=function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
some_txt = sapply(some_txt, try.tolower)
some_txt = some_txt[some_txt != ""]
names(some_txt) = NULL
return(some_txt)
}
iconv(tweets$text, from=”UTF-8", to=”ASCII”, sub=””)
iconv(tweets$text, from=”UTF-8", to=”ASCII”, sub=””)
str_replace_all(tweets$text,"[^[:graph:]]", " ")
tweets_text =str_replace_all(tweets$text,"[^[:graph:]]", " ")
tweets_text <- gsub("[^[:alnum:]///' ]", "", tweets_text)
#Convert all text to lower case
tweets_text <- tolower(tweets_text)
#Remove retweet keyword
tweets_text <- gsub("rt", "", tweets_text)
tweets_text
tweets_text <- gsub("[[:punct:]]", "", tweets_text)
tweets_text <- gsub("http\\w+", "", tweets_text)
tweets_text <- gsub("[ |\t]{2,}", "", tweets_text)
tweets_text <- gsub("^ ", "", tweets_text)
tweets_text <- gsub(" $", "", tweets_text)
tweets_text <- gsub("@\\w+", "", tweets_text)
tweets_text <- gsub("@\\w+", "", tweets_text)
tweets_text
tweets_text =str_replace_all(tweets$text,"[^[:graph:]]", " ")
tweets_text
#Remove usernames
tweets_text <- gsub("@\\w+", "", tweets_text)
tweets_text
#Remove Junk Values and replacement words like fffd which appear because of encoding differences
tweets_text <- gsub("[^[:alnum:]///' ]", "", tweets_text)
#Convert all text to lower case
tweets_text <- tolower(tweets_text)
#Remove retweet keyword
tweets_text <- gsub("rt", "", tweets_text)
#Remove Punctuations
tweets_text <- gsub("[[:punct:]]", "", tweets_text)
#Remove links
tweets_text <- gsub("http\\w+", "", tweets_text)
#Remove tabs
tweets_text <- gsub("[ |\t]{2,}", "", tweets_text)
#Remove blankspaces at begining
tweets_text <- gsub("^ ", "", tweets_text)
#Remove blankspaces at the end
tweets_text <- gsub(" $", "", tweets_text)
tweets_text
tweets_text =str_replace_all(tweets$text,"[^[:graph:]]", " ")
#Remove usernames
tweets_text <- gsub("@\\w+", "", tweets_text)
#Remove Junk Values and replacement words like fffd which appear because of encoding differences
tweets_text <- gsub("[^[:alnum:]///' ]", "", tweets_text)
#Convert all text to lower case
tweets_text <- tolower(tweets_text)
#Remove retweet keyword
tweets_text <- gsub("rt", "", tweets_text)
#Remove Punctuations
tweets_text <- gsub("[[:punct:]]", "", tweets_text)
#Remove links
tweets_text <- gsub("http\\w+", "", tweets_text)
#Remove tabs
tweets_text <- gsub("[ |\t]{2,}", " ", tweets_text)
#Remove blankspaces at begining
tweets_text <- gsub("^ ", "", tweets_text)
#Remove blankspaces at the end
tweets_text <- gsub(" $", "", tweets_text)
tweets_text
unlist(tweets_text)
tweet_words = unlist(strsplit( unlist(tweets_text), " " ) )
tweet_words
tweet_freq = plyr::count(tweet_words)
tweet_freq
tweet_freq[,1]
tweet_freq[,2]
tweet_freq[,2]>1
f.t = tweet_freq[,2]>1
tweet_freq[f.t,]
dim(tweet_freq[f.t,] )
dim(tweet_freq[tweet_freq[,2]>3,] )
dim(tweet_freq[tweet_freq[,2]>=3,] )
dim(tweet_freq[tweet_freq[,2]>3,] )
f.t = tweet_freq[,2]>3
tweet_freq[f.t,]
wordcloud2(tweet_freq[f.t,],   figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(tweet_freq[f.t,],   figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(tweet_freq,   figPath = figPath, size = 1.5,color = "skyblue")
figPath
tweet_freq
tweet_freq[,2]
order(tweet_freq[,2])
tweet_freq[order(tweet_freq[,2]),]
letterCloud(tweet_freq, word = "R", size = 2)
letterCloud(tweet_freq, word = "R", size = 2)
tweet_freq[,2]
sort(tweet_freq[,2])
o = order(tweet_freq[,2])
tweet_freq[o,]
tail(tweet_freq[o,]0
tail(tweet_freq[o,])
tweets.text.corpus <- Corpus(VectorSource(tweets_text))
tweets.text.corpus
tweets.text.corpus <- tm_map(tweets.text.corpus, function(x)removeWords(x,stopwords()))
tweets.text.corpus
tweets_text
tweets.text.corpus
wordcloud(tweets.text.corpus,min.freq = 2, scale=c(7,0.5),colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 150)
library("wordcloud")
library("wordcloud")install.packages("wordcloud")
install.packages("wordcloud")
library("wordcloud")
tweets.text.corpus
?tm
?Corpus
unlist(tweets.text.corpus)
tweet_words = unlist(strsplit( unlist(tweets.text.corpus), " " ) )
tweet_freq = plyr::count(tweet_words)
f.t = tweet_freq[,2]>3
letterCloud(tweet_freq, word = "R", size = 2)
tweet_freq
tweet_freq
f.t = tweet_freq[,2]>1
tail(tweet_freq[o,])
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
tweets.text.corpus
unlist(tweets.text.corpus)
tweets_text2 = unlist(tweets.text.corpus)
tweets_text2 <- gsub("^ ", "", tweets_text2)
tweets_text2
tweets_text2 <- gsub(" $", "", tweets_text2)
tweets_text2
tweet_words = unlist(strsplit( unlist(tweets_text2), " " ) )
f.t = tweet_freq[,2]>1
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
tweets_text2 <- gsub(" ", " ", tweets_text2)
tweet_words = unlist(strsplit( unlist(tweets_text2), " " ) )
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
tweets_text2 <- gsub(" ", " ", tweets_text2)
tweet_words = unlist(strsplit( unlist(tweets_text2), " " ) )
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
tweets_text2
tweets_text <- gsub(" ", " ", tweets_text)
tweets_text = unlist(tweets.text.corpus)
tweets_text <- gsub(" ", " ", tweets_text)
tweet_words = unlist(strsplit( unlist(tweets_text), " " ) )
tweet_freq = plyr::count(tweet_words)
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
tweet_words
tweet_words==""
tweet_freq = plyr::count(tweet_words[tweet_words!=""])
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
f.t = tweet_freq[,2]>1
letterCloud(tweet_freq[f.t,], word = "R", size = 2)
letterCloud(tweet_freq , word = "R", size = 2)
letterCloud(tweet_freq , word = "R", size = 3)
letterCloud(tweet_freq , word = "R", size = 5)
letterCloud(tweet_freq , word = "R")
letterCloud(tweet_freq , word = "R", size= 2)
letterCloud(tweet_freq , word = "R", size= 3)
letterCloud(tweet_freq , word = "R", size= 2)
tweet_freq
o = order(tweet_freq[,2])
tail(tweet_freq[o,])
letterCloud(tweet_freq , word = "R", size= 1)
letterCloud(tweet_freq , word = "R", size= 10)
letterCloud(tweet_freq , word = "R", size= 2)
wordcloud2(tweet_freq[f.t,],   figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(tweet_freq[f.t,],   figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(tweet_freq[f.t,],   figPath = figPath, size = 2,color = "skyblue")
wordcloud2(tweet_freq,   figPath = figPath, size = 2,color = "skyblue")
wordcloud2(tweet_freq,   figPath = figPath, color = "skyblue")
plot(g)
save(tweets, file="Rtweets.Rdata")
setwd("H:/redBlocks/redBlocks/outliers/bin/")
setwd("../")
setwd("figures/")
source("bin/helper_redBlocks.r")
source("../bin/helper_redBlocks.r")
load("hd.DE.Rdata")
load("hd.DE.Rdata")
colSums(genes.up)
subgenesets = (genes.up[fg,])*1
recur = rowSums(subgenesets)
fdrs = calc_fdrs_recur( subgenesets )
fdrs.bin = calc_binom_recur(subgenesets)
hist( recur[recur>0]+0.01 , col=cols.rec[3], main="Recurrence", xlab="Count",xlim=c(1,4))
abline( v = fdrs$Pt)
load("goslim.Rdata")
library(EGAD)
load("goslim.Rdata")
n = dim(subgenesets)[2]
annotations = make_annotations(GO.human[,c(1,3)], (unique(GO.human[,1])), go.slim[ff,1])
go.enrich = lapply(1:n, function(i) gene_set_enrichment( names(which(subgenesets[,i]==1)), annotations, go.slim[ff,1:2]))
paths = sapply(1:n, function(i) (go.enrich[[i]]$padj<0.05)*1 )
paths.padj = sapply(1:n, function(i) (go.enrich[[i]]$padj) )
rownames(paths) = go.enrich[[1]][,1]
rownames(paths.padj) = go.enrich[[1]][,1]
f = rowSums( paths) > 1
sigtemp= paths
sigtemp[sigtemp==1] = "*"
sigtemp[sigtemp==0] = ""
heatmap.3( -log10(paths.padj[f,]), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, cellnote=sigtemp[f,], notecol="black", notecex=2 )
fdrs.paths = calc_fdrs_recur(paths)
recur.path = rowSums(paths)
hist( recur.path[recur.path>0]+0.01 , col=cols.rec[3], main="Recurrence", xlab="Count",xlim=c(1,4))
abline( v = fdrs.paths$Pt)
png("step3.png"); hist( recur.path[recur.path>0]+0.01 , col=cols.rec[3], main="Recurrence", xlab="Count",xlim=c(1,4))
abline( v = fdrs.paths$Pt)
dev.off( )
genes.sub = subgenesets[recur>0,]
m = match(rownames(genes.sub), rownames(annotations))
f.r = !is.na(m)
f.a = m[f.r]
go.sub = annotations[f.a,]
pheatmap(go.sub)
png("step4a.png"); pheatmap(go.sub) ; dev.off()
pheatmap(genes.sub[f.r,] )
png("step4b.png");pheatmap(genes.sub[f.r,] ); dev.off()
pheatmap(paths.padj)
png("step4c.png");pheatmap(paths.padj)
dev.off()
go.enrich.recur = lapply(1:n, function(i) gene_set_enrichment( names(recur[recur>(i-1)]), annotations, go.slim[ff,1:2]))
pathsrec = sapply(1:n, function(i) (go.enrich.recur[[i]]$padj<0.05)*1 )
pathsrec.padj = sapply(1:n, function(i) go.enrich.recur[[i]]$padj )
rownames(pathsrec) = go.enrich.recur[[1]][,1]
rownames(pathsrec.padj) = go.enrich.recur[[1]][,1]
heatmap.3( -log10(pathsrec.padj), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, notecol="black", notecex=2 )
png("step5.png"); heatmap.3( -log10(pathsrec.padj), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, notecol="black", notecex=2 ) dev.off();
png("step5.png"); heatmap.3( -log10(pathsrec.padj), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, notecol="black", notecex=2 ); dev.off();
dev.off()
png("step5.png"); heatmap.3( -log10(pathsrec.padj), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, notecol="black", notecex=2 ); dev.off();
hist( recur[recur>0]+0.01 , col=cols.rec[3], main="Recurrence", xlab="Count",xlim=c(1,4))
abline( v = fdrs$Pt)
png("step1.png"); hist( recur[recur>0]+0.01 , col=cols.rec[3], main="Recurrence", xlab="Count",xlim=c(1,4))
abline( v = fdrs$Pt); dev.off()
heatmap.3( -log10(paths.padj[f,]), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, cellnote=sigtemp[f,], notecol="black", notecex=2 )
heatmap.3( -log10(paths.padj[f,]), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, cellnote=sigtemp[f,], notecol="black", notecex=2 )
png("step2.png"); heatmap.3( -log10(paths.padj[f,]), Colv=F, Rowv=F, col=cols9,cexRow = 0.7, cellnote=sigtemp[f,], notecol="black", notecex=2 ); dev.off();
